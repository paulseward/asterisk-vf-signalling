;====================================================================
; [send-vf]
;
; Subroutine for bridging a call to a SIP peer, and then sending
; in-band Voice Frequency signalling to it
;
; Usage:
; GoSub(send-vf,s,1(sip-peer, sig-type, digits))
;
;   sip-peer => SIP/peer-name
;   sig-type => [mf|dtmf|ac9]
;   digits   => [0-9a-d*#w] - not all digits make sense for all sig types

[send-vf]
  exten => s,1,NoOp(sending inband VF signalling)
  same  => n,Set(sip-peer=${ARG1})
  same  => n,Set(sig-type=${FILTER(a-z0-9,${ARG2})})
  same  => n,Set(digits=${FILTER(0-9a-d*#w,${ARG3})})
  same  => n,GotoIf(ChanIsAvail(${sip-peer},s)?paging:nutone)
  same  => n(paging),Page(${sip-peer}&LOCAL/${digits}@send-vf-${sig-type},diq)
  same  => n(nutone),Gosub(UKNUtone,s,1)

;====================================================================
; Local Contexts for sending in-band VF signalling
[send-vf-dtmf]
  exten => _[0-9#*w].,1,Answer()
  exten => _[0-9#*w].,n,Wait(3)
  exten => _[0-9#*w].,n,GoSub(dtmfer,start,1(${EXTEN}))

[send-vf-mf]
  exten => _[0-9w].,1,Answer()
  exten => _[0-9w].,n,Wait(3)
  exten => _[0-9w].,n,GoSub(mfer,start,1(${EXTEN}))

[send-vf-ac9]
  exten => _[0-9w].,1,Answer()
  exten => _[0-9w].,n,Wait(3)
  exten => _[0-9w].,n,GoSub(ac9er,start,1(${EXTEN}))

;====================================================================
; Subroutines for doing the signalling

[dtmfer]
  ; Accepts "0-9,a-d,w"
  ;
  ; DTMF tones are defined in globals.conf, and are 50ms tone + 50ms space
  ; w spaces are 500ms

  exten => start,1,Set(number=${TOUPPER(${ARG1})})      ; Convert to upper case
  same  => n,Set(number=${REPLACE(number,*,S)})         ; Replace *
  same  => n,Set(number=${REPLACE(number,#,H)})         ; Replace #
  same  => n,Set(number=${FILTER(0-9A-DSHW,${number})}) ; Filter invalid characters

  same  => n,Set(c=0)
  same  => n,Set(numdigits=${LEN(${number})})
  same  => n,Set(tonestring=)
  same  => n,Set(toneduration=0)

  same  => n,While($[${c}<${numdigits}])
    same  => n,Set(MFnext=${DTMF${number:${c}:1}})
    same  => n,Set(tonestring=${tonestring}${MFnext})
    ; Add 500ms to the toneduration for 'w' chars, 100ms for other digits
    same  => n,Set(toneduration=${MATH(${toneduration} + ${IF($[${number:${c}:1}=W]?500:100)},int)})
    same  => n,Set(c=${INC(c)})
  same  => n,EndWhile

  same  => n,Playtones(${tonestring})
  same  => n,Wait($[${toneduration}/1000])
  same  => n,StopPlaytones()
  same  => n,Return


[mfer]
  ; Accepts "0-9,w"
  ;
  ; MF tones are defined in globals.conf, and are 50ms tone + 50ms space
  ; KP is 150ms
  ; ST is 85ms
  ; w spaces are 500ms

  exten => start,1,Set(number=${TOUPPER(${ARG1})})      ; Convert to upper case
  same  => n,Set(number=${FILTER(0-9W,${number})})      ; Filter invalid characters

  same  => n,Set(c=0)
  same  => n,Set(numdigits=${LEN(${number})})
  same  => n,Set(tonestring=${MFKP})
  same  => n,Set(toneduration=${MATH(150+85)})          ; add KP/ST durations

  same  => n,While($[${c}<${numdigits}])
    same  => n,Set(MFnext=${MF${number:${c}:1}})
    same  => n,Set(tonestring=${tonestring}${MFnext})
    ; Add 500ms to the toneduration for 'w' chars, 100ms for other digits
    same  => n,Set(toneduration=${MATH(${toneduration} + ${IF($[${number:${c}:1}=W]?500:100)},int)})
    same  => n,Set(c=${INC(c)})
  same => n,EndWhile

  same => n,Set(tonestring=${tonestring}${MFST})
  same  => n,Playtones(${tonestring})
  same  => n,Wait($[${toneduration}/1000])
  same  => n,StopPlaytones()
  same  => n,Return


[ac9er]
  ; 2280Hz
  ; 100ms start pulse
  ; 66ms/34ms per digit (100ms total)

  ; Accepts "0-9,W"
  exten => start,1,Set(number=${TOUPPER(${ARG1})})      ; Convert to upper case
  same  => n,Set(number=${FILTER(0-9W,${number})})      ; Filter invalid characters

  same  => n,Set(c=0)
  same  => n,Set(numdigits=${LEN(${number})})
  same  => n,Set(tonestring=${AC9ST})
  same  => n,Set(toneduration=600) ; 100ms Start, 500ms pause

  same  => n,While($[${c}<${numdigits}])
    same  => n,Set(MFnext=${AC9${number:${c}:1}})
    same  => n,Set(tonestring=${tonestring}${MFnext}${AC9W})
    ; TODO - Calculate tone duration better
    same  => n,Set(toneduration=${MATH(${toneduration} + ${IF($[${number:${c}:1}=1]?100:0)},int)})
    same  => n,Set(toneduration=${MATH(${toneduration} + ${IF($[${number:${c}:1}=2]?200:0)},int)})
    same  => n,Set(toneduration=${MATH(${toneduration} + ${IF($[${number:${c}:1}=3]?300:0)},int)})
    same  => n,Set(toneduration=${MATH(${toneduration} + ${IF($[${number:${c}:1}=4]?400:0)},int)})
    same  => n,Set(toneduration=${MATH(${toneduration} + ${IF($[${number:${c}:1}=5]?500:0)},int)})
    same  => n,Set(toneduration=${MATH(${toneduration} + ${IF($[${number:${c}:1}=6]?600:0)},int)})
    same  => n,Set(toneduration=${MATH(${toneduration} + ${IF($[${number:${c}:1}=7]?700:0)},int)})
    same  => n,Set(toneduration=${MATH(${toneduration} + ${IF($[${number:${c}:1}=8]?800:0)},int)})
    same  => n,Set(toneduration=${MATH(${toneduration} + ${IF($[${number:${c}:1}=9]?900:0)},int)})
    same  => n,Set(toneduration=${MATH(${toneduration} + ${IF($[${number:${c}:1}=0]?1000:0)},int)})
    same  => n,Set(toneduration=${MATH(${toneduration} + ${IF($[${number:${c}:1}=W]?500:0)},int)})
    same  => n,Set(toneduration=${MATH(${toneduration} + 500)}) ; IDP
    same  => n,Set(c=${INC(c)})
  same => n,EndWhile

  same  => n,Playtones(${tonestring})
  same  => n,Wait($[${toneduration}/1000])
  same  => n,StopPlaytones()
  same  => n,Return

[sfer]
  ; 2600Hz
  ; 100ms start pulse
  ; 66ms/34ms per digit (100ms total)

  ; Accepts "0-9,W"
  exten => start,1,Set(number=${TOUPPER(${ARG1})})      ; Convert to upper case
  same  => n,Set(number=${FILTER(0-9W,${number})})      ; Filter invalid characters

  same  => n,Set(c=0)
  same  => n,Set(p=0)

  same  => n,Set(numdigits=${LEN(${number})})
  same  => n,Set(tonestring=)
  same  => n,Set(toneduration=0)

  same => n,While($[${c}<${numdigits}])
    same => n,Set(p=$[${p}+${number:${c}:1}])
    same => n,Set(SFnext=${SF${number:${c}:1}})
    same => n,Set(tonestring=${tonestring}${SFnext})
    same => n,Set(tonestring=${tonestring}${SFW})
    same => n,Set(c=${INC(c)})
  same => n,EndWhile

  same => n,Set(toneduration=$[${SFPULSE}*${p}+200*${numdigits}]) ; TODO - this doesn't work with zeros

  same => n,Playtones(${tonestring})
  same => n,Wait($[${toneduration}/1000])
  same => n,StopPlaytones()
  same => n,Return

